package Packages
public
	with Processors::ARM;

	with Buses::I2C;

	with Buses::USB;

	with Processor_Properties;
	
	with StereoCamAADL_Threads;

	system vantSystem
	end vantSystem;

	system implementation vantSystem.with_devices
		subcomponents
			this_laser: device laser;
			this_A57: processor A57.impl;
			this_camera_L: device camera.impl;
			this_camera_R: device camera.impl;
			this_usb_1: bus Buses::USB::USB.impl;
			this_usb_2: bus Buses::USB::USB.impl;
			this_usb_3: bus Buses::USB::USB.impl;
			this_controller: process controller.withThreads;
			this_controllerLaser: process controllerLaser.withThreads;
		connections
			bus_usb_1_A57: bus access this_usb_1 -> this_A57.usb_bus_1;
			bus_usb_2_A57: bus access this_usb_2 -> this_A57.usb_bus_2;
			bus_usb_3_A57: bus access this_usb_3 -> this_A57.usb_bus_3;
			bus_usb_1_cam_L: bus access this_usb_1 -> this_camera_L.usbPort;
			bus_usb_2_cam_R: bus access this_usb_2 -> this_camera_R.usbPort;
			bus_usb_3_Laser: bus access this_usb_3 -> this_laser.Serial_Wire;
			L_cam_on_off: port this_controller.L_camera_on_off -> this_camera_L.camera_on_off;
			R_cam_on_off: port this_controller.R_camera_on_off -> this_camera_R.camera_on_off;
			L_cam_img: port this_camera_L.imgOut -> this_controller.L_camera_img_In;
			R_cam_img: port this_camera_R.imgOut -> this_controller.R_camera_img_In;
			Laser: port this_laser.proc_evt -> this_controllerLaser.proc_evt_In;
	end vantSystem.with_devices;

-----------------------
-------PROCESSOR-------
-----------------------
	processor A57 extends Processors::ARM::Generic_ARM
		features
			i2c_bus: requires bus access Buses::I2C::I2C.IMPL;
			usb_bus_1: requires bus access Buses::USB::USB.impl;
			usb_bus_2: requires bus access Buses::USB::USB.impl;
			usb_bus_3: requires bus access Buses::USB::USB.impl;
			
		properties
			Processor_Properties::Processor_Frequency => 1430 Mhz;
			Scheduling_Protocol => (POSIX_1003_HIGHEST_PRIORITY_FIRST_PROTOCOL);
	end A57;
	
	processor implementation A57.impl
	end A57.impl;


-----------------------
-------PROCESS---------
-----------------------
	process controller
		features
			L_camera_img_In: in data port;
			R_camera_img_In: in data port;
			L_camera_on_off: out event port;
			R_camera_on_off: out event port;
	end controller;

	process implementation controller.withThreads
		subcomponents
			this_thread_img_processing: thread StereoCamAADL_Threads::stereo_img_processing.impl;
		connections
			L_cam_on_off: port this_thread_img_processing.L_camera_on_off -> L_camera_on_off;
			R_cam_on_off: port this_thread_img_processing.R_camera_on_off -> R_camera_on_off;
			L_cam_img: port L_camera_img_In -> this_thread_img_processing.L_camera_img_In;
			R_cam_img: port L_camera_img_In -> this_thread_img_processing.R_camera_img_In;
	end controller.withThreads;

	process controllerLaser
		features
			proc_evt_In: in event port;
	end controllerLaser;

	process implementation controllerLaser.withThreads
		subcomponents
			this_thread_laser_processing: thread StereoCamAADL_Threads::Laser_processing.impl;
		connections
			Laser_sensing: port proc_evt_In -> this_thread_laser_processing.proc_evt_In;
	end controllerLaser.withThreads;



-----------------------
-------CAMERA----------
-----------------------
	device camera
		features
			usbPort: requires bus access Buses::USB::USB.impl;
			imgOut: out data port;
			camera_on_off: in event port;
	end camera;

	device implementation camera.impl
	end camera.impl;

-----------------------
-------LASER-----------
-----------------------
	device laser
		features
			Serial_Wire: requires bus access Buses::USB::USB.impl;
			proc_evt: out event port;
	end laser;

	device implementation laser.impl
		properties
			Initialize_Entrypoint => classifier (Laser_Initialize);
	end laser.impl;

	subprogram Laser_Initialize
		properties
			Source_Name => "laser_initialize";
			Source_Text => ("telemeter_urg04lx.c");
			Source_Language => (C);
	end Laser_Initialize;

	subprogram Laser_Read_Acquisition
		properties
			Source_Name => "laser_read_acquisition";
			Source_Text => ("telemeter_urg04lx.c");
			Source_Language => (C);
	end Laser_Read_Acquisition;

	subprogram Laser_Start_Acquisition
		properties
			Source_Name => "laser_start_acquisition";
			Source_Text => ("telemeter_urg04lx.c");
			Source_Language => (C);
	end Laser_Start_Acquisition;


-----------------------
-------IMU-------------
-----------------------
	 device IMU
	  features
	    angle : out data port ;
	    acc   : out data port ;
	    i2c   : requires bus access Buses::I2C::I2C.IMPL;
	  end IMU;
	
	device implementation IMU.impl
	end IMU.impl;

-----------------------
-------BUSES-----------
-----------------------
	bus Ethernet
	--properties
	-- Available_Bandwidth => (10 MBytesps, 100 MBytesps, 1 GBytesps);
	end Ethernet;

	bus implementation Ethernet.impl
	end Ethernet.impl;

	device Generic_Ethernet
		features
			Eth: requires bus access Ethernet.impl;
	end Generic_Ethernet;


	
end Packages;