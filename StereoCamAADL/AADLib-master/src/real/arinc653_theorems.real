--------------------------------------------------------------------------------
-- This set of REAL theorems defines implicit constraints defined in
-- the ARINC653 APEX, based on concepts defined in the SAE-AADL
-- ARINC653 annex document.
--
-- For each property, we define the list of constraints attached

--------------------------------------------------------------------------------
--  Global theorem: this theorem gathers all sub theorem defined in this file.

theorem check_arinc653_restrictions
foreach s in system_set do
   requires (check_partitions_criticality -- All partitions define a DAL and
--         and scheduling_major_frame       -- respect slot allocation and
         and partitions_execution         -- are executed and
         and partition_bindings           -- are bound

         and main_memory_segments         -- Memory are made of separate segments
         and spatial_isolation            -- allowing for spatial isolation
	);
   check (1=1);
end check_arinc653_restrictions;

-------------------------------------------------------------------------------
-- All ARINC653 partitions must define a Design Assurance Level (DAL)
-- or criticality

theorem check_partitions_criticality
   foreach vp in virtual_processor_set do
         check (property_exists (vp, "ARINC653::DAL")
                or property_exists (vp, "ARINC653::Criticality"));
end check_partitions_criticality;

-------------------------------------------------------------------------------
-- The duration of the major frame is more than or equal to the sum of
-- all partition slots

--theorem scheduling_major_frame
--    foreach cpu in processor_set do
--    check ((not property_exists (cpu, "ARINC653::Module_Major_Frame"))
--    or (float (property (cpu, "ARINC653::Module_Major_Frame")) >=
--           sum (property (cpu, "ARINC653::Partition_Slots"))));
--end scheduling_major_frame;

-------------------------------------------------------------------------------
-- Check that, for all processors that define a set of partitions,
-- then all partitions are executed, that is, are affected an execution slot.

theorem partitions_execution
    foreach p in Processor_Set do
      VP := { x in Virtual_Processor_Set | Is_Subcomponent_Of (x, p)};

      check ((not property_exists (p, "ARINC653::Slots_Allocation")) or
             (cardinal (VP) = 0) or
            (Is_In (list (VP), property (p, "ARINC653::Slots_Allocation"))));

end partitions_execution;

-------------------------------------------------------------------------------
-- Check that for all process, this process is bound to one and only
-- one virtual processor, and to a memory component.

theorem partition_bindings
   foreach p in process_set do
     VP := { v in Virtual_Processor_Set | Is_Bound_To (p, v) };
     Mem := { x in Memory_Set | Is_Bound_To (x,p)};

     check (cardinal (VP) = 1
             and cardinal (Mem) = 1);

end partition_bindings;

-------------------------------------------------------------------------------
-- Check that each partition has its own memory space (aka. spatial isolation)

theorem spatial_isolation
  foreach m in Memory_Set do
    p := { x in Process_Set | Is_Bound_To (m, x)};

    check (cardinal (p) < 2);
end spatial_isolation;

-------------------------------------------------------------------------------
-- Check that the main memory (RAM) is divided into different memory
-- sub-components.

theorem main_memory_segments
  foreach s in system_set do
    mem := { x in Memory_Set | Is_Subcomponent_Of (x, s)};
    segments := { x in Memory_Set | Is_Subcomponent_Of (x, mem)};

    check (cardinal (segments) > 0);
end main_memory_segments;

-------------------------------------------------------------------------------
theorem check_processor_hm_validity
   foreach mycpu in processor_set do

      var allowed_module_errors
         := list ("Module_Config", "Module_Init", "Module_Scheduling");
      var allowed_module_actions
         := list ("Nothing", "Module_Stop", "Module_Restart");

      var module_actions :=  (property (mycpu, "ARINC653::HM_Actions"));
      var module_errors  :=  (property (mycpu, "ARINC653::HM_Errors"));

      check ((property_exists (mycpu, "ARINC653::HM_Actions")) and
             (property_exists (mycpu, "ARINC653::HM_Errors")) and
             ( is_in (module_actions, allowed_module_actions)) and
             ( is_in (module_errors, allowed_module_errors)));

end check_processor_hm_validity;

-------------------------------------------------------------------------------
theorem check_virtual_processor_hm_validity
   foreach vp in virtual_processor_set do

      var allowed_module_errors
         := list ("Partition_Config", "Partition_Init",
                  "Partition_Scheduling", "Partition_Handler");
      var allowed_module_actions
         := list ("Nothing", "Partition_Stop", "Partition_Restart");

      var module_actions :=  (property (vp, "ARINC653::HM_Actions"));
      var module_errors  :=  (property (vp, "ARINC653::HM_Errors"));

      check ((property_exists (vp, "ARINC653::HM_Actions")) and
             (property_exists (vp, "ARINC653::HM_Errors")) and
             ( is_in (module_actions, allowed_module_actions)) and
             ( is_in (module_errors, allowed_module_errors)));

end check_virtual_processor_hm_validity;

-------------------------------------------------------------------------------
theorem check_thread_hm_validity
   foreach thr in thread_set do

      var allowed_module_errors
         := list ("Deadline_Miss", "Application_Error", "Numeric_Error",
         "Illegal_Request", "Stack_Overflow", "Memory_Violation",
         "Hardware_Fault", "Power_Fail");

      var allowed_module_actions
         := list ("Ignore", "Confirm", "Process_Stop",
         "Process_Stop_And_Start_Another", "Process_Restart", "Partition_Stop",
         "Partition_Restart");

      var module_actions :=  (property (thr, "ARINC653::HM_Actions"));
      var module_errors  :=  (property (thr, "ARINC653::HM_Errors"));

      check ((property_exists (thr, "ARINC653::HM_Actions")) and
             (property_exists (thr, "ARINC653::HM_Errors")) and
             ( is_in (module_actions, allowed_module_actions)) and
             ( is_in (module_errors, allowed_module_errors)));

end check_thread_hm_validity;

-------------------------------------------------------------------------------
--theorem check_error_coverage
--   foreach thr in thread_set do

--      Prs := {x in Process_Set | is_subcomponent_of (thr, x)};

--      VP := {x in Virtual_Processor_Set | is_bound_to (Prs, x)};

--      CPU := {x in Processor_Set | is_subcomponent_of (VP, x)};

--      var errors
--         := list ("Module_Config", "Module_Init", "Module_Scheduling",
--                  "Partition_Scheduling", "Partition_Config",
--                  "Partition_Handler", "Partition_Init", "Deadline_Miss",
--                  "Application_Error", "Numeric_Error", "Illegal_Request",
--                  "Stack_Overflow", "Memory_Violation", "Hardware_Fault",
--                  "Power_Fail");

--      var actual_errors := (property (CPU, "ARINC653::HM_Errors") +
--                            property (VP, "ARINC653::HM_Errors") +
--                            property (thr, "ARINC653::HM_Errors"));

--      check (is_in (errors, actual_errors) and is_in (actual_errors, errors));

--end check_error_coverage;
