--  Compute whether the connection is bound with a physical bus that
--  is large enough to prevent message queuing

theorem Buses_Rate

foreach e in Bus_Set do
  
  Cnx_Set(e) := {x in Connection_Set | Is_Bound_To (x, e)};

  Connected_Data_Set := {x in Data_Set | Is_Accessed_By (x, Cnx_Set)};

  check ((not exists (e, "ASSERT_Properties::Access_Bandwidth")) or 
         (Get_Property_Value (e, "ASSERT_Properties::Access_Bandwidth") >= 
   	  Sum (Get_Property_Value (Connected_Data_Set, "source_data_size"))));

end;

-------------------------------------------------------------------------------
--  Check for each processor whether the RAM consumed by all processor
--  threads' is smaller than the sum of the processor memories size

theorem Memory_Size

foreach e in Processor_Set do

  Proc_Set(e) := {x in Process_Set | Is_Bound_To (x, e)};

  Threads := {x in Thread_Set | Is_Subcomponent_Of (x, Proc_Set)};

  Mem_Set(e) := {x in Memory_Set | Is_Bound_To (x, e)};

  check (((not exists (Mem_Set, "ASSERT_Properties::Memory_Size")) or 
          (not exists (Threads, "source_stack_size"))) or
          (Sum (Get_Property_Value 
               (Mem_Set, "ASSERT_Properties::Memory_Size")) > 
           Sum (Get_Property_Value (Threads, "source_stack_size"))));
 
end;

-------------------------------------------------------------------------------
--  Checks whether the latency is below the user-specified max latency
--  In order to actually work, we need to detect user-specified flows
--  and match them to actual flows
 
theorem Latency

foreach f in End_To_End_Flows_Set do

  crossed_buses := {b in Bus_Set | 
                      Is_Passing_Through (f, b)};

  crossed_threads := {t in Thread_Set | 
                      Is_Passing_Through (f, t)};

  var Period_Sum := Sum (property
               (crossed_threads, "period"));

  var WCET_Sum := Sum (last (property
               (crossed_threads, "compute_execution_time")));

  --  This theorem is valid only in the (simple) case where their 
  --  is no message queuing

--      requires (buses_rate);

  check ((not exists (crossed_threads, "Subprogram_Execution_Time")) or 
          (int (Sum (Last (Get_Property_Value 
               (crossed_threads, 
                "Subprogram_Execution_Time"))))
           <= int (Last (Get_Property_Value (f, "Expected_Latency")))));

          
end Latency;

