-- Earliest deadline first (EDF) is a dynamic scheduling
-- algorithm used in real-time operating systems

-- This theorem is able to verify EDF schedulability
-- on each processor designed in a system

-- check_prop_def : verify existence of required properties
-- and then all threads are periodic

theorem edf_prop_def

foreach e in thread_set do

check(  Exists (e,"Dispatch_Protocol")
	and (Property (e, "Dispatch_Protocol") = "Periodic")
	and Exists (e,"compute_execution_time")
   	and Exists (e,"Period"));

end edf_prop_def;

-- Utilization_Factor : compute and return utilization factor
-- of a thread set.

theorem Utilization_Factor

foreach e in Local_Set do

var Period 	:= Property (e, "period");
var CET		:= Last ( Property (e, "compute_execution_time"));
var Factor	:= CET / Period;

return (MSum (Factor));

end Utilization_Factor;

-- theorem EDF uses Utilization_Factor returned value
-- for checking EDF schedulability law.

theorem edf

foreach e in processor_set do

Processes (e) := { x in process_set | Is_Bound_To (x, e)};
Threads := { x in thread_Set | Is_Subcomponent_Of (x, processes)};

var Sum_Utilizations := compute Utilization_Factor(Threads);

check (Sum_Utilizations <= 1);

end edf;

