--------------------------------------------------------------------------------
-- Check whether the threads bound to each processors can be
-- schedduled with RMA (cf. Liu, Layland. "Scheduling Algorithms for
-- Multi-programming in hard-Real-Time Environment", JACM, 01/1973)

-- Earliest deadline first (EDF) is a dynamic scheduling
-- algorithm used in real-time operating systems

-- Checking of the both scheduling protocol which designed in this theorems
-- (RMS & EDF) assume shared data between tasks (cf. Laurent Pautet."Ordonnancement
-- temps r√©el 1.5")

-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------

theorem check_scheduling

-- This theorems check rma and edf schedulability hypothesis

foreach e in local_set do
	requires(required_properties
		and shared_data
		and check_priority_rma
		and scheduling);

	check (1 <> 2);
end check_scheduling;

-------------------------------------------------------------------------

theorem required_properties

foreach e in thread_set do

check(  Exists (e,"Dispatch_Protocol")
	and (Property (e, "Dispatch_Protocol") = "Periodic")
	and Exists (e,"compute_execution_time")
   	and Exists (e,"Period")
   	and (Last (Property (e,"compute_execution_time")) <= Property (e, "Period"))
   	and (Property (e, "Period") = Property (e, "deadline")) );

end required_properties;

-------------------------------------------------------------------------


theorem shared_data

foreach e in data_set do

connections := { x in connection_set | Is_Accessed_By (e,x) };
threads := { t in thread_set | Is_Accessed_By (t,connections)};
processes := { p in Process_Set | Is_Subcomponent_Of (threads, p ) } ;
processors := { p in processor_set | Is_Bound_to ( processes, p) };

var supported_pcp := list("rms");
var supoorted_shared_data := list("rms","edf");
var MPF_high := List ("high");
var MPF_low := List ("low");

check( if (cardinal (threads) <= 1)
then (1=1)

-- check PCP applicability

else
( ((Is_In (Property (processors, "Scheduling_protocol") , supported_pcp) )
and ( Property (e, "priority") >= Max (Property (threads, "priority")))
--and (Is_In (Property (processors, "Processor_properties::Max_Prio_First"), MPF_high))
))
or
((Is_In (Property (processors, "Scheduling_protocol") , supported_pcp) )
and ( Property (e, "priority") <= Max (Property (threads, "priority")))
--and (Is_In (Property (processors, "Processor_properties::Max_Prio_First"), MPF_low)))
)

-- Shared data managed by scheduling protocol

or
(Is_In (Property (processors, "Scheduling_protocol") , supoorted_shared_data))
);

end shared_data;

-------------------------------------------------------------------------

theorem check_priority_rma

foreach e in thread_set do

var priority := Property (e, "priority");

high_priority := {t in Thread_Set | Property (t, "priority") > priority };
Equal_priority := {t in Thread_Set | Property (t, "priority") = priority };

var period := Property (e, "Period");

high_periods_high := { t in high_priority | Property (t, "period") > period};
high_periods_low := { t in high_priority | Property (t, "period") < period};

Processors := {x in processor_set | (Exists (x,"Processor_properties::Max_Prio_First")
and Exists (x,"scheduling_protocol") )};

var rms_protocol := list ("RMS");

var MPF_high := List ("high");
var MPF_low := List ("low");

check (cardinal (processor_set) = 1
      and Is_In (rms_protocol, Property (Processors, "scheduling_protocol"))
      and (cardinal (Equal_priority) = 1));

--then ( if (Is_In (MPF_high, Property (Processors, "Processor_properties::Max_Prio_First")))
--then (cardinal (high_periods_high) = 0)
--else (cardinal (high_periods_low) = 0) )

--else ( not Is_In (rms_protocol, Property (Processors, "scheduling_protocol"))));

end check_priority_rma;
-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------

-- Utilization_Factor : compute and return utilization factor
-- of a thread set.

theorem Utilization_Factor

foreach e in Local_Set do

var priority := Property (e, "priority");
low_priority := {t in Thread_Set | Property (t, "priority") < priority};

con_to_shared := { x in connection_set | Is_Accessed_By (data_set,x) };

con_to_thread := { x in con_to_shared | Is_Accessed_By (e,x)};

shared_data := { d in data_set | is_accessed_by (d,con_to_thread)};

conn_acc_shared := {x in con_to_shared | is_accessed_by(shared_data,x)};

threads_acc_shared	:= { t in low_priority | Is_Accessed_By (t,conn_acc_shared)};

-- When access duration on shared data is low than period of task, "Access_Time"
-- AADL properties must be designed for quantify this time. This theorem manages
-- access duration which is equal to period of task.
-- "Access_Time" properties is not yet managed by REAL when this theorem is designed.

var B_i := if (cardinal (threads_acc_shared) > 0)
				then
				Sum (Last (Property (threads_acc_shared, "compute_execution_time")))
				else 0;

var Period 	:= Property (e, "period");
var CET		:= Last ( Property (e, "compute_execution_time"));
var Factor	:= (CET + B_i) / Period;

return (MSum (Factor));

end Utilization_Factor;

-------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------

-- Scheduling theorem is designed for checking EDF and RMA schedulability

theorem scheduling
foreach e in processor_set do

Processes(e) := { x in process_set | Is_Bound_To (x,e)};
threads	:= {x in thread_set | Is_Subcomponent_Of (x, processes)};
var U := compute Utilization_Factor(Threads);

var get_protocol := Property(e,"Scheduling_Protocol");

var rms_protocol := list ("RMS");
var edf_protocol := list ("EDF");

var bool_RMS := if (is_in (rms_protocol, get_protocol)) then 1 else 0;
var bool_EDF := if (is_in (edf_protocol, get_protocol)) then 1 else 0;
var single_protocol := if ( (bool_RMS + bool_EDF) <> 1 ) then 0 else (bool_RMS + bool_EDF);

 check (if (bool_RMS * single_protocol = 1)
 		then (U <= (Cardinal (Threads) * (2 ** (1 / Cardinal (Threads))) -1)) 	-- Check RMA
 		else (if ( bool_EDF * single_protocol = 1)
 		then (U <= 1 * bool_EDF * single_protocol)		-- Check EDF
 		else (1 < 0) ) ); 		-- Return FALSE

 end scheduling;

 -------------------------------------------------------------------------
-------------------------------------------------------------------------
-------------------------------------------------------------------------

